import cadquery as cq
import os
from cadquery import *
from rdp import rdp
from statistics import mean 

#-----------------------------------------------------
#Variables, length units in mm
#-----------------------------------------------------
patient_initials = "C, D"
outputdirectory = "//...."
filename_prefix_1 = "TBI_Block_1"
filename_prefix_2 = "TBI_Block_2"

collimatorAngle = 45
interiorDepth = 21 #The interior thickness of the blocks, completely filled with Tungsten BBs
shellThickness = 2 #The shell thickness of the TBI blocks
holeDistance = 35 #Y Distance between the center of 2 holes centered at 0. E.g. If =30, Hole 1 center at y=+15, Hole 2 center at y=-15

item_placement_x_scale_factor = 0.85 #The is an offset factor in the x direction for items placed on the TBI block due to their non-uniform shape.
item_placement_y_scale_factor = 1.1 #The is an offset factor in the y direction for items placed on the TBI block due to their non-uniform shape.

holeSizeX = 20 #The square hole on the surface of the TBI block size in the x direction.
holeSizeY = 20 #The square hole on the surface of the TBI block size in the x direction.
frame_offset = 5 #An offset for text placement

#-----------------------------------------------------
#Block 1: pts
#-----------------------------------------------------
TBI_1 =[(32.500,-69.418),(32.564,-69.500),(33.500,-70.496),(33.504,-70.500),(34.029,-71.500),(34.334,-72.500),(34.409,-73.500),(34.072,-74.500),(33.716,-75.500),(33.500,-76.139),(33.367,-76.500),(33.028,-77.500),(32.679,-78.500),(32.500,-79.019),(32.333,-79.500),(31.985,-80.500),(31.639,-81.500),(31.500,-81.887),(31.294,-82.500),(30.938,-83.500),(30.602,-84.500),(30.500,-84.750),(30.238,-85.500),(29.845,-86.500),(29.500,-87.410),(29.451,-87.500),(29.072,-88.500),(28.677,-89.500),(28.500,-89.951),(28.291,-90.500),(27.887,-91.500),(27.504,-92.500),(27.500,-92.506),(27.119,-93.500),(26.716,-94.500),(26.500,-95.066),(26.328,-95.500),(25.935,-96.500),(25.556,-97.500),(25.500,-97.607),(25.166,-98.500),(24.760,-99.500),(24.500,-100.145),(24.339,-100.500),(23.879,-101.500),(23.500,-102.399),(23.438,-102.500),(22.989,-103.500),(22.549,-104.500),(22.500,-104.574),(22.104,-105.500),(21.661,-106.500),(21.500,-106.727),(20.920,-107.500),(20.500,-107.888),(20.054,-108.500),(19.633,-109.500),(19.500,-109.906),(19.120,-110.500),(18.500,-111.074),(18.286,-111.500),(17.723,-112.500),(17.500,-112.888),(17.189,-113.500),(16.500,-114.385),(16.381,-114.500),(15.859,-115.500),(15.500,-116.303),(15.373,-116.500),(14.500,-117.201),(14.014,-117.500),(13.500,-117.810),(12.994,-118.500),(12.500,-119.072),(11.500,-119.488),(11.442,-119.500),(10.500,-119.661),(9.655,-119.500),(9.500,-119.464),(8.500,-119.410),(7.500,-119.178),(6.705,-118.500),(6.500,-118.312),(5.500,-117.928),(4.500,-117.984),(3.500,-118.057),(2.500,-117.867),(1.649,-117.500),(1.500,-117.411),(0.500,-116.913),(-0.400,-116.500),(-0.500,-116.431),(-1.500,-115.947),(-2.456,-115.500),(-2.500,-115.466),(-3.500,-114.982),(-4.500,-114.504),(-4.505,-114.500),(-5.500,-114.018),(-6.500,-113.534),(-6.544,-113.500),(-7.500,-113.053),(-8.500,-112.563),(-8.589,-112.500),(-9.500,-112.086),(-10.500,-111.596),(-10.653,-111.500),(-11.500,-111.120),(-12.500,-110.576),(-12.584,-110.500),(-13.500,-109.878),(-14.047,-109.500),(-14.500,-109.186),(-15.444,-108.500),(-15.500,-108.444),(-16.500,-107.741),(-16.829,-107.500),(-17.500,-107.042),(-18.262,-106.500),(-18.500,-106.307),(-19.500,-105.621),(-19.634,-105.500),(-20.500,-104.873),(-21.040,-104.500),(-21.500,-104.184),(-22.436,-103.500),(-22.500,-103.438),(-23.500,-102.737),(-23.821,-102.500),(-24.500,-102.034),(-25.252,-101.500),(-25.500,-101.302),(-26.500,-100.639),(-26.658,-100.500),(-27.500,-99.898),(-28.089,-99.500),(-28.500,-99.216),(-29.500,-98.504),(-29.504,-98.500),(-30.500,-97.784),(-30.914,-97.500),(-31.500,-97.103),(-32.341,-96.500),(-32.500,-96.361),(-33.500,-95.693),(-33.740,-95.500),(-34.500,-94.970),(-35.195,-94.500),(-35.500,-94.273),(-36.500,-93.589),(-36.596,-93.500),(-37.500,-92.851),(-38.016,-92.500),(-38.500,-92.177),(-39.443,-91.500),(-39.500,-91.444),(-40.500,-90.741),(-40.835,-90.500),(-41.500,-90.053),(-42.283,-89.500),(-42.500,-89.323),(-43.500,-88.667),(-43.686,-88.500),(-44.500,-87.907),(-45.039,-87.500),(-45.500,-87.126),(-46.250,-86.500),(-46.500,-86.277),(-47.459,-85.500),(-47.500,-85.459),(-48.500,-84.667),(-48.671,-84.500),(-49.500,-83.818),(-49.881,-83.500),(-50.500,-82.992),(-51.107,-82.500),(-51.500,-82.180),(-52.325,-81.500),(-52.500,-81.328),(-53.500,-80.534),(-53.534,-80.500),(-54.500,-79.718),(-54.735,-79.500),(-55.500,-78.879),(-55.961,-78.500),(-56.500,-78.049),(-57.157,-77.500),(-57.500,-77.207),(-58.343,-76.500),(-58.500,-76.344),(-59.500,-75.534),(-59.534,-75.500),(-60.500,-74.703),(-60.714,-74.500),(-61.500,-73.843),(-61.909,-73.500),(-62.500,-73.005),(-63.105,-72.500),(-63.500,-72.169),(-64.301,-71.500),(-64.500,-71.307),(-65.488,-70.500),(-65.500,-70.488),(-66.500,-69.672),(-66.676,-69.500),(-67.500,-68.804),(-67.859,-68.500),(-68.500,-67.958),(-69.057,-67.500),(-69.328,-66.500),(-68.534,-65.500),(-68.500,-65.466),(-67.688,-64.500),(-67.500,-64.312),(-66.759,-63.500),(-66.500,-63.234),(-65.831,-62.500),(-65.500,-62.154),(-64.897,-61.500),(-64.500,-61.078),(-63.966,-60.500),(-63.500,-60.000),(-63.034,-59.500),(-62.500,-58.922),(-62.101,-58.500),(-61.500,-57.840),(-61.179,-57.500),(-60.500,-56.728),(-60.277,-56.500),(-59.500,-55.621),(-59.379,-55.500),(-58.500,-54.519),(-58.481,-54.500),(-57.589,-53.500),(-57.500,-53.408),(-56.630,-52.500),(-56.500,-52.372),(-55.628,-51.500),(-55.500,-51.372),(-54.628,-50.500),(-54.500,-50.372),(-53.628,-49.500),(-53.500,-49.372),(-52.628,-48.500),(-52.500,-48.373),(-51.672,-47.500),(-51.500,-47.268),(-51.039,-46.500),(-50.500,-45.616),(-50.404,-45.500),(-49.799,-44.500),(-49.500,-44.022),(-49.180,-43.500),(-48.569,-42.500),(-48.500,-42.431),(-47.563,-41.500),(-47.500,-41.433),(-46.888,-40.500),(-46.500,-39.863),(-46.250,-39.500),(-45.596,-38.500),(-45.500,-38.390),(-44.911,-37.500),(-44.500,-36.835),(-44.268,-36.500),(-43.621,-35.500),(-43.500,-35.357),(-42.932,-34.500),(-42.500,-33.809),(-42.282,-33.500),(-41.650,-32.500),(-41.500,-32.301),(-40.924,-31.500),(-40.500,-30.848),(-40.282,-30.500),(-39.746,-29.500),(-39.500,-29.044),(-39.217,-28.500),(-38.667,-27.500),(-38.500,-27.223),(-38.144,-26.500),(-37.596,-25.500),(-37.500,-25.370),(-37.063,-24.500),(-36.512,-23.500),(-36.500,-23.487),(-35.964,-22.500),(-35.500,-21.590),(-35.431,-21.500),(-34.881,-20.500),(-34.500,-19.726),(-34.356,-19.500),(-33.799,-18.500),(-33.500,-18.050),(-33.074,-17.500),(-32.500,-16.883),(-32.179,-16.500),(-31.500,-15.732),(-31.282,-15.500),(-30.500,-14.754),(-29.500,-14.773),(-28.552,-15.500),(-28.500,-15.549),(-27.500,-16.282),(-27.233,-16.500),(-26.500,-17.048),(-25.876,-17.500),(-25.500,-17.776),(-24.519,-18.500),(-24.500,-18.519),(-23.500,-19.250),(-23.171,-19.500),(-22.500,-19.975),(-21.771,-20.500),(-21.500,-20.718),(-20.500,-21.431),(-20.429,-21.500),(-19.500,-22.188),(-19.062,-22.500),(-18.500,-22.898),(-17.689,-23.500),(-17.500,-23.667),(-16.500,-24.339),(-16.317,-24.500),(-15.500,-25.112),(-14.957,-25.500),(-14.500,-25.825),(-13.607,-26.500),(-13.500,-26.602),(-12.500,-27.356),(-12.356,-27.500),(-11.500,-28.220),(-11.183,-28.500),(-10.500,-29.073),(-9.997,-29.500),(-9.500,-29.922),(-8.815,-30.500),(-8.500,-30.780),(-7.644,-31.500),(-7.500,-31.644),(-6.500,-32.473),(-6.473,-32.500),(-5.500,-33.307),(-5.302,-33.500),(-4.500,-34.179),(-4.125,-34.500),(-3.500,-35.024),(-2.940,-35.500),(-2.500,-35.878),(-1.761,-36.500),(-1.500,-36.741),(-0.596,-37.500),(-0.500,-37.596),(0.500,-38.417),(0.583,-38.500),(1.500,-39.268),(1.747,-39.500),(2.500,-40.135),(2.930,-40.500),(3.500,-40.984),(4.116,-41.500),(4.500,-41.829),(5.289,-42.500),(5.500,-42.703),(6.459,-43.500),(6.500,-43.541),(7.500,-44.361),(7.639,-44.500),(8.500,-45.229),(8.806,-45.500),(9.500,-46.084),(9.987,-46.500),(10.500,-46.935),(11.170,-47.500),(11.500,-47.788),(12.344,-48.500),(12.500,-48.656),(13.500,-49.488),(13.512,-49.500),(14.500,-50.323),(14.680,-50.500),(15.500,-51.193),(15.854,-51.500),(16.500,-52.046),(17.035,-52.500),(17.500,-52.895),(18.217,-53.500),(18.500,-53.759),(19.379,-54.500),(19.500,-54.621),(20.500,-55.444),(20.556,-55.500),(21.500,-56.292),(21.716,-56.500),(22.500,-57.160),(22.896,-57.500),(23.500,-58.013),(24.076,-58.500),(24.500,-58.861),(25.258,-59.500),(25.500,-59.727),(26.307,-60.500),(26.500,-60.696),(27.182,-61.500),(27.500,-61.947),(27.903,-62.500),(28.500,-63.285),(28.688,-63.500),(29.392,-64.500),(29.500,-64.614),(30.173,-65.500),(30.500,-65.947),(30.901,-66.500),(31.500,-67.292),(31.683,-67.500),(32.072,-68.500)];
TBI_after_RDP = rdp(TBI_1, epsilon = 0.25)

TBI = TBI_after_RDP
#-----------------------------------------------------
#Block 2: pts
#-----------------------------------------------------
TBI_2 =[(105.451,1.500),(105.500,1.416),(105.862,0.500),(106.247,-0.500),(106.496,-1.500),(106.500,-1.550),(106.570,-2.500),(106.585,-3.500),(106.599,-4.500),(106.618,-5.500),(106.636,-6.500),(106.654,-7.500),(106.671,-8.500),(106.686,-9.500),(106.707,-10.500),(106.722,-11.500),(106.739,-12.500),(106.757,-13.500),(106.757,-14.500),(106.644,-15.500),(106.500,-15.989),(106.336,-16.500),(105.936,-17.500),(105.500,-18.314),(105.350,-18.500),(104.500,-19.333),(104.329,-19.500),(103.500,-20.175),(103.095,-20.500),(102.500,-20.978),(101.846,-21.500),(101.500,-21.784),(100.661,-22.500),(100.500,-22.661),(99.576,-23.500),(99.500,-23.578),(98.564,-24.500),(98.500,-24.565),(97.558,-25.500),(97.500,-25.558),(96.543,-26.500),(96.500,-26.543),(95.500,-27.404),(95.400,-27.500),(94.500,-28.164),(93.956,-28.500),(93.500,-28.788),(92.500,-29.459),(92.456,-29.500),(91.500,-30.132),(90.890,-30.500),(90.500,-30.759),(89.500,-31.417),(89.406,-31.500),(88.500,-32.085),(87.817,-32.500),(87.500,-32.723),(86.500,-33.373),(86.345,-33.500),(85.500,-34.032),(84.744,-34.500),(84.500,-34.683),(83.500,-35.333),(83.282,-35.500),(82.500,-35.982),(81.679,-36.500),(81.500,-36.644),(80.500,-37.297),(80.217,-37.500),(79.500,-37.932),(78.639,-38.500),(78.500,-38.621),(77.500,-39.189),(76.500,-39.496),(76.458,-39.500),(75.500,-39.585),(74.500,-39.620),(73.500,-39.661),(72.500,-39.708),(71.500,-39.541),(71.453,-39.500),(70.500,-38.826),(70.179,-38.500),(69.500,-37.808),(69.201,-37.500),(68.500,-36.707),(68.302,-36.500),(67.500,-35.549),(67.451,-35.500),(66.602,-34.500),(66.500,-34.396),(65.685,-33.500),(65.500,-33.315),(64.720,-32.500),(64.500,-32.280),(63.753,-31.500),(63.500,-31.247),(62.783,-30.500),(62.500,-30.214),(61.810,-29.500),(61.500,-29.185),(60.842,-28.500),(60.500,-28.151),(59.874,-27.500),(59.500,-27.120),(58.899,-26.500),(58.500,-26.090),(57.932,-25.500),(57.500,-25.056),(56.961,-24.500),(56.500,-24.027),(55.990,-23.500),(55.500,-22.995),(55.021,-22.500),(54.500,-21.965),(54.049,-21.500),(53.500,-20.930),(53.081,-20.500),(52.500,-19.901),(52.110,-19.500),(51.500,-18.867),(51.139,-18.500),(50.500,-17.836),(50.168,-17.500),(49.500,-16.802),(49.202,-16.500),(48.500,-15.760),(48.241,-15.500),(47.500,-14.717),(47.283,-14.500),(46.500,-13.676),(46.323,-13.500),(45.500,-12.636),(45.364,-12.500),(44.500,-11.592),(44.408,-11.500),(43.500,-10.550),(43.451,-10.500),(42.500,-9.504),(42.496,-9.500),(41.541,-8.500),(41.500,-8.459),(40.583,-7.500),(40.500,-7.417),(39.627,-6.500),(39.500,-6.373),(38.677,-5.500),(38.500,-5.323),(37.763,-4.500),(37.500,-4.195),(36.949,-3.500),(36.500,-2.892),(36.199,-2.500),(35.500,-1.596),(35.404,-1.500),(34.683,-0.500),(34.500,-0.295),(33.886,0.500),(33.500,1.019),(33.144,1.500),(32.500,2.332),(32.344,2.500),(31.627,3.500),(31.500,3.631),(30.831,4.500),(30.500,4.942),(30.082,5.500),(29.500,6.255),(29.287,6.500),(28.549,7.500),(28.500,7.549),(27.771,8.500),(27.500,8.847),(27.016,9.500),(26.500,10.187),(26.246,10.500),(25.500,11.466),(25.466,11.500),(24.713,12.500),(24.500,12.746),(23.948,13.500),(23.803,14.500),(24.500,15.356),(24.676,15.500),(25.500,15.959),(26.500,16.398),(26.746,16.500),(27.500,16.765),(28.500,17.150),(29.437,17.500),(29.500,17.534),(30.500,17.904),(31.500,18.280),(32.145,18.500),(32.500,18.633),(33.500,19.088),(34.252,19.500),(34.500,19.683),(35.500,20.356),(35.678,20.500),(36.500,21.029),(37.250,21.500),(37.500,21.688),(38.500,22.356),(38.654,22.500),(39.500,23.169),(39.893,23.500),(40.500,23.987),(41.137,24.500),(41.500,24.803),(42.348,25.500),(42.500,25.650),(43.500,26.424),(43.576,26.500),(44.500,27.250),(44.783,27.500),(45.500,28.084),(46.013,28.500),(46.500,28.892),(47.250,29.500),(47.500,29.727),(48.459,30.500),(48.500,30.541),(49.500,31.379),(49.633,31.500),(50.500,32.367),(50.621,32.500),(51.466,33.500),(51.500,33.534),(52.282,34.500),(52.500,34.734),(53.133,35.500),(53.500,35.953),(53.953,36.500),(54.500,37.179),(54.767,37.500),(55.496,38.500),(55.500,38.504),(56.204,39.500),(56.500,39.939),(56.870,40.500),(57.500,41.396),(57.596,41.500),(58.273,42.500),(58.500,42.807),(58.954,43.500),(59.500,44.293),(59.672,44.500),(60.344,45.500),(60.500,45.693),(61.047,46.500),(61.500,47.349),(61.602,47.500),(61.943,48.500),(62.231,49.500),(62.500,50.430),(62.527,50.500),(62.815,51.500),(63.110,52.500),(63.373,53.500),(63.500,53.768),(63.797,54.500),(64.500,55.318),(64.692,55.500),(65.500,56.172),(66.024,56.500),(66.500,56.780),(67.500,56.912),(68.188,56.500),(68.500,56.224),(69.178,55.500),(69.500,55.199),(70.179,54.500),(70.500,54.188),(71.188,53.500),(71.500,53.190),(72.190,52.500),(72.500,52.188),(73.188,51.500),(73.500,51.186),(74.183,50.500),(74.500,50.184),(75.184,49.500),(75.500,49.184),(76.184,48.500),(76.500,48.184),(77.181,47.500),(77.500,47.181),(78.181,46.500),(78.500,46.181),(79.177,45.500),(79.500,45.177),(80.177,44.500),(80.500,44.175),(81.175,43.500),(81.500,43.173),(82.177,42.500),(82.500,42.166),(83.112,41.500),(83.500,40.920),(83.792,40.500),(84.424,39.500),(84.500,39.415),(85.088,38.500),(85.500,37.803),(85.713,37.500),(86.361,36.500),(86.500,36.325),(87.008,35.500),(87.500,34.694),(87.650,34.500),(88.297,33.500),(88.500,33.215),(88.924,32.500),(89.500,31.594),(89.583,31.500),(90.241,30.500),(90.500,30.113),(90.873,29.500),(91.500,28.560),(91.556,28.500),(92.229,27.500),(92.500,27.094),(92.866,26.500),(93.500,25.559),(93.556,25.500),(94.229,24.500),(94.500,24.097),(94.869,23.500),(95.500,22.559),(95.556,22.500),(96.229,21.500),(96.500,21.091),(96.862,20.500),(97.500,19.551),(97.549,19.500),(98.232,18.500),(98.500,18.083),(98.832,17.500),(99.373,16.500),(99.500,16.236),(99.793,15.500),(100.198,14.500),(100.500,13.713),(100.602,13.500),(101.007,12.500),(101.404,11.500),(101.500,11.307),(101.814,10.500),(102.218,9.500),(102.500,8.776),(102.627,8.500),(103.031,7.500),(103.424,6.500),(103.500,6.356),(103.836,5.500),(104.247,4.500),(104.500,3.836),(104.644,3.500),(105.060,2.500)];
TBI_after_RDP_2 = rdp(TBI_2, epsilon = 0.25)

TBI_2 = TBI_after_RDP_2
#-----------------------------------------------------
#Both Blocks: Creates a polygon from each block pts, then extrude, rotate, and shell
#-----------------------------------------------------
s = cq.Workplane("XY",origin=(0,0,0))

TBI_block = (s
           .polyline(TBI)
           .close()
           .extrude(interiorDepth)
           .rotate((0, 0, 0), (0, 0, 1), -collimatorAngle).faces("+Z")
           .shell(shellThickness, kind = "intersection")) #kind="arc" for rounded edges

TBI_2_block = (s
              .polyline(TBI_2)
              .close()
              .extrude(interiorDepth)
              .rotate((0, 0, 0), (0, 0, 1), -collimatorAngle).faces("+Z")
              .shell(shellThickness, kind = "intersection"))
#-----------------------------------------------------
#Block 1: Finds min and max pts coordinates in the XY plane, then calculate center y of min and max pts and weighted x average of all pts
#-----------------------------------------------------
TBI_y_max = TBI_block.faces("+Z").vertices(DirectionMinMaxSelector(Vector(0, 1, 0), True))
TBI_y_min = TBI_block.faces("+Z").vertices(DirectionMinMaxSelector(Vector(0, 1, 0), False))
TBI_x_max = TBI_block.faces("+Z").vertices(DirectionMinMaxSelector(Vector(1, 0, 0), True))
TBI_x_min = TBI_block.faces("+Z").vertices(DirectionMinMaxSelector(Vector(1, 0, 0), False))

for vertex in TBI_y_max.objects:
    TBI_y_max_pt = vertex.__dict__['Y']
for vertex in TBI_y_min.objects:
    TBI_y_min_pt = vertex.__dict__['Y']
for vertex in TBI_x_max.objects:
    TBI_x_max_pt = vertex.__dict__['X']
for vertex in TBI_x_min.objects:
    TBI_x_min_pt = vertex.__dict__['X']

TBI_center_y = (TBI_y_max_pt + TBI_y_min_pt) / 2
TBI_center_x = (TBI_x_max_pt + TBI_x_min_pt) / 2

TBI_x_weighted = TBI_block.faces("+Z").vertices()

TBI_x_weighted_pts =[]
for vertex in TBI_x_weighted.objects:
    TBI_x_weighted_pts.append(vertex.__dict__['X'])


TBI_x_avg = mean(TBI_x_weighted_pts)

#-----------------------------------------------------
#Block 2: Finds min and max pts coordinates in the XY plane, then calculate center y of min and max pts and weighted x average of all pts
#-----------------------------------------------------
TBI_2_y_max = TBI_2_block.faces("+Z").vertices(DirectionMinMaxSelector(Vector(0, 1, 0), True))
TBI_2_y_min = TBI_2_block.faces("+Z").vertices(DirectionMinMaxSelector(Vector(0, 1, 0), False))
TBI_2_x_max = TBI_2_block.faces("+Z").vertices(DirectionMinMaxSelector(Vector(1, 0, 0), True))
TBI_2_x_min = TBI_2_block.faces("+Z").vertices(DirectionMinMaxSelector(Vector(1, 0, 0), False))

for vertex in TBI_2_y_max.objects:
    TBI_2_y_max_pt = vertex.__dict__['Y']
for vertex in TBI_2_y_min.objects:
    TBI_2_y_min_pt = vertex.__dict__['Y']
for vertex in TBI_2_x_max.objects:
    TBI_2_x_max_pt = vertex.__dict__['X']
for vertex in TBI_2_x_min.objects:
    TBI_2_x_min_pt = vertex.__dict__['X']

TBI_2_x_weighted = TBI_2_block.faces("+Z").vertices()

TBI_2_x_weighted_pts =[]
for vertex in TBI_2_x_weighted.objects:
    TBI_2_x_weighted_pts.append(vertex.__dict__['X'])


TBI_2_x_avg = mean(TBI_2_x_weighted_pts)

TBI_2_center_y = (TBI_2_y_max_pt + TBI_2_y_min_pt) / 2
TBI_2_center_x = (TBI_2_x_max_pt + TBI_2_x_min_pt) / 2

ave_y_center = (TBI_center_y + TBI_2_center_y) / 2

#-----------------------------------------------------
#Both Blocks: at the global average y of the center y of each block, and individual weighted x average, place 2 holes.
#They are holeDistance from their respective centers, centered at 0. ie 30 is +15, -15.

#Look into .workplane(offset=1, centerOption="CenterOfBoundBox"
#-----------------------------------------------------
TBI_Block_holes = (cq.Workplane("XY", origin = (item_placement_x_scale_factor * TBI_x_avg, item_placement_y_scale_factor * ave_y_center, 0))
                 .rect(0, holeDistance, forConstruction = True)
                 .vertices()
                 .box(holeSizeX, holeSizeY, 10))


TBI_2_Block_holes = (cq.Workplane("XY", origin = (item_placement_x_scale_factor * TBI_2_x_avg, item_placement_y_scale_factor * ave_y_center, 0))
                 .rect(0, holeDistance, forConstruction = True)
                 .vertices()
                 .box(holeSizeX, holeSizeY, 10))

TBI_block_remove = (s
           .polyline(TBI)
           .close()
           .extrude(interiorDepth)
           .rotate((0, 0, 0), (0, 0, 1), -collimatorAngle))

pt_initials_placement_location = item_placement_y_scale_factor * ave_y_center - holeDistance / 2 - holeSizeY - frame_offset

orientation_placement_location = item_placement_y_scale_factor * ave_y_center + holeDistance / 2 + holeSizeY + frame_offset

#TBI_1_AP_text = cq.Workplane("XY", origin = (item_placement_x_scale_factor * TBI_x_avg, orientation_placement_location, interiorDepth + shellThickness)).workplane().transformed(offset = cq.Vector(0, 0, -0.5), rotate = cq.Vector(0, 0, 180)).text("AP-L", 7, 1, kind = "bold")

TBI_1_Pt_initials_text = cq.Workplane("XY", origin = (item_placement_x_scale_factor * TBI_x_avg, item_placement_y_scale_factor * ave_y_center -holeDistance/2, -shellThickness+0.5)).workplane().transformed(offset = cq.Vector(0, 0, -0.5), rotate = cq.Vector(0, 180, 180)).text(patient_initials + " | PA-L", 7, 1, kind = "bold")

#TBI_2_AP_text = cq.Workplane("XY", origin = (item_placement_x_scale_factor * TBI_2_x_avg, orientation_placement_location, interiorDepth + shellThickness)).workplane().transformed(offset = cq.Vector(0, 0, -0.5), rotate = cq.Vector(0, 0, 180)).text("AP-R", 7, 1, kind = "bold")

TBI_2_Pt_initials_text = cq.Workplane("XY", origin = (item_placement_x_scale_factor * TBI_2_x_avg, item_placement_y_scale_factor * ave_y_center -holeDistance/2, -shellThickness +0.5)).workplane().transformed(offset = cq.Vector(0, 0, -0.5), rotate = cq.Vector(0, 180, 180)).text(patient_initials + " | PA-R", 7, 1, kind = "bold")

TBI_1_final = TBI_block.cut(TBI_Block_holes).union(TBI_1_Pt_initials_text)

TBI_2_block_remove = (s
           .polyline(TBI_2)
           .close()
           .extrude(interiorDepth)
           .rotate((0, 0, 0), (0, 0, 1), -collimatorAngle))

TBI_2_final = TBI_2_block.cut(TBI_2_Block_holes).union(TBI_2_Pt_initials_text)#.union(TBI_2_AP_text)

#-----------------------------------------------------
#Calculates interior centroid of closed polygon
#-----------------------------------------------------
def centroid_poly(X, Y):
    N = len(X)
    # minimal sanity check
    if not(N == len(Y)): raise ValueError('X and Y must be same length.')
    elif N< 3: raise ValueError('At least 3 vertices must be passed.')
    sum_A, sum_Cx, sum_Cy = 0, 0, 0
    last_iteration = N - 1
    # from 0 to N-1
    for i in range(N):
        if i != last_iteration:
            shoelace = X[i] * Y[i + 1] - X[i + 1] * Y[i]
            sum_A += shoelace
            sum_Cx += (X[i] + X[i + 1]) * shoelace
            sum_Cy += (Y[i] + Y[i + 1]) * shoelace
        else:
            # N-1 case (last iteration): substitute i+1 -> 0
            shoelace = X[i] * Y[0] - X[0] * Y[i]
            sum_A += shoelace
            sum_Cx += (X[i] + X[0]) * shoelace
            sum_Cy += (Y[i] + Y[0]) * shoelace
    A = 0.5 * sum_A
    factor = 1 / (6 * A)
    Cx = factor * sum_Cx
    Cy = factor * sum_Cy
    return Cx, Cy, abs(A)

#-----------------------------------------------------
#Finds TBI 1 centroid and points
#-----------------------------------------------------
TBI_Block_new_pts = TBI_block.faces("<Z").vertices()

TBI_x_new_pts =[]
for vertex in TBI_Block_new_pts.objects:
    TBI_x_new_pts.append(vertex.__dict__['X'])

TBI_y_new_pts =[]
for vertex in TBI_Block_new_pts.objects:
    TBI_y_new_pts.append(vertex.__dict__['Y'])

TBI_Cx, TBI_Cy, TBI_A = centroid_poly(TBI_x_new_pts, TBI_y_new_pts)
TBI_Cx_accepted = TBI_Cx
TBI_Cy_accepted = -1 * TBI_Cy

#-----------------------------------------------------
#Finds TBI 2 centroid and points
#-----------------------------------------------------
TBI_2_Block_new_pts = TBI_2_block.faces("<Z").vertices()

TBI_2_x_new_pts =[]
for vertex in TBI_2_Block_new_pts.objects:
    TBI_2_x_new_pts.append(vertex.__dict__['X'])

TBI_2_y_new_pts =[]
for vertex in TBI_2_Block_new_pts.objects:
    TBI_2_y_new_pts.append(vertex.__dict__['Y'])

TBI_2_Cx, TBI_2_Cy, TBI_2_A = centroid_poly(TBI_2_x_new_pts, TBI_2_y_new_pts)
TBI_2_Cx_accepted = TBI_2_Cx
TBI_2_Cy_accepted = -1 * TBI_2_Cy

#-----------------------------------------------------
#Exporting
#-----------------------------------------------------
TBI_1_volume = (interiorDepth) * (TBI_A) / 1000
TBI_2_volume = (interiorDepth) * (TBI_2_A) / 1000

TBI_1_mass = TBI_1_volume * 0.6 * 17.5
TBI_2_mass = TBI_2_volume * 0.6 * 17.5

TBI_total_volume_cc = (TBI_1_volume + TBI_2_volume)

TBI_total_mass = TBI_total_volume_cc * 0.6 * 17.5

#newpath = outputdirectory
#filename = 'volumeTBI.txt'
#if not os.path.exists(newpath):
#   os.makedirs(newpath)
#
#lines = ['The calcuted internal volume of the internal TBI block AP-L is ' + str(round(TBI_1_volume, 2)) + ' cm^3\n',
#         'Assuming 60% fill of Tungsten BBs, the approximate mass of Tungsten BBs is ' + str(round(TBI_1_mass, 2)) + ' g\n','\n',
#         'The calcuted internal volume of the internal TBI block AP-R is ' + str(round(TBI_2_volume, 2)) + ' cm^3\n',
#         'Assuming 60% fill of Tungsten BBs, the approximate mass of Tungsten BBs is ' + str(round(TBI_2_mass, 2)) + ' g']

# Create the file path by joining the directory and filename
#file_path = os.path.join(newpath, filename)

#file1 = open(file_path, 'w')
#file1.writelines(lines)
#file1.close()

#-----------------------------------------------------
#Both Blocks: Export to patient folder as .stl
#-----------------------------------------------------
exporters.export(TBI_1_final, outputdirectory + filename_prefix_1 + ".stl")
exporters.export(TBI_2_final, outputdirectory + filename_prefix_2 + ".stl")
            
